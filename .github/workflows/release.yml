name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version string"
        required: true
        default: "0.0.0"
      body:
        description: "Release body"
        required: true
        default: "Release body"

env:
  BUILD_TYPE: Release

jobs:
  lint-format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: DoozyX/clang-format-lint-action@v0.13
      with:
        source: 'Client Server'
        clangFormatVersion: 12

  build-linux:
    needs: lint-format
    runs-on: ubuntu-22.04
    steps:
    - name: Dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get upgrade -y
        sudo apt-get install -y libudev-dev libgl-dev libx11-xcb-dev libfontenc-dev libxaw7-dev libxcomposite-dev libxcursor-dev libxdamage-dev libxfixes-dev libxi-dev libxinerama-dev libxmu-dev libxmuu-dev libxpm-dev libxrandr-dev libxres-dev libxss-dev libxtst-dev libxv-dev libxvmc-dev libxxf86vm-dev libxcb-render-util0-dev libxcb-xkb-dev libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev libxcb-randr0-dev libxcb-shape0-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-xinerama0-dev libxcb-dri3-dev

    - name: Install Conan
      id: conan
      uses: turtlebrowser/get-conan@main

    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Build
      run: |
        conan config init
        mkdir -p build; cd build && conan install .. --build=missing  -s compiler.libcxx=libstdc++11 -c tools.system.package_manager:mode=install -c tools.system.package_manager:sudo=True && cmake -DCMAKE_BUILD_TYPE=Debug .. && cmake --build  . -- -j 3

    - name: Package code
      run: |
        cd build/
        cpack -G TGZ
    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: Linux
        path: |
          ${{ github.workspace }}/build/R-Type-*-Linux.tar.gz

  build-windows:
    needs: lint-format
    runs-on: windows-latest
    steps:
    - name: Cache Conan packages
      id: cache_windows
      uses: actions/cache@v3
      with:
        path: |
         ~/.conan
         C:\.conan
        key: ${{ runner.os }}-${{ hashFiles('**/conanfile.txt') }}

    - name: Install Conan
      id: conan
      uses: turtlebrowser/get-conan@main
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Launch build script
      run: ./build.bat

    - name: Package
      run: |
        cd build/
        cpack -G WIX -C Debug
    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: Windows
        path: |
          ${{ github.workspace }}/build/R-Type-*-win64.msi

  coverage:
    needs: [build-linux]
    runs-on: ubuntu-22.04
    steps:
      - name: Dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get upgrade -y
          sudo apt-get install -y libudev-dev libgl-dev libx11-xcb-dev libfontenc-dev libxaw7-dev libxcomposite-dev libxcursor-dev libxdamage-dev libxfixes-dev libxi-dev libxinerama-dev libxmu-dev libxmuu-dev libxpm-dev libxrandr-dev libxres-dev libxss-dev libxtst-dev libxv-dev libxvmc-dev libxxf86vm-dev libxcb-render-util0-dev libxcb-xkb-dev libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev libxcb-randr0-dev libxcb-shape0-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-xinerama0-dev libxcb-dri3-dev

      - name: Install Conan
        id: conan
        uses: turtlebrowser/get-conan@main

      - name: Install criterion
        run: |
          sudo apt-get install gcovr
          sudo apt-get install meson
          git clone --recursive https://github.com/Snaipe/Criterion Criterion
          cd Criterion
          meson build
          ninja -C build
          sudo ninja -C build install
          sudo ldconfig

      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Build tests
        run: ./build_tests.sh

      - name: Build report
        run: gcovr --xml report.xml --exclude tests

      - name: Codecov
        uses: codecov/codecov-action@v2.1.0
        with:
          token: ${{ secrets.CODECOV_ACCESS_TOKEN }}
          fail_ci_if_error: false
      - name: Package code
        run: |
          cd build/
          cpack -G TGZ
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: Linux
          path: |
            ${{ github.workspace }}/build/R-Type-*-Linux.tar.gz

  mirroring:
    if: github.event_name == 'push'
    needs: coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url:
            ${{ secrets.EPI_REPO_URL }}
          ssh_private_key:
            ${{ secrets.EPI_MIRRORING_KEY }}

  create-release:
    needs: [build-linux, build-windows]
    permissions:
      contents: write
    environment:
      name: prod
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v3

      - name: Debug directory
        run: ls -lRa

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.version }}
          body: ${{ github.event.inputs.body }}
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            ${{ github.workspace }}/Linux/*.tar.gz
            ${{ github.workspace }}/Windows/*.msi
